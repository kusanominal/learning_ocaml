4-1: int -> int -> int 型
4-2: string -> string 型
4-3: float -> float 型
4-4: float -> float -> float 型

■考察
p.22 によれば、int -> int -> int 型というのは右に結合する、
すなわち int -> (int -> int) 型という意味だと言う。
文中では深く触れてはいないが、文字通り解釈するならば、
これはこの関数の「関数が返す結果の型」が「int -> int 型の関数」ということになる。

例を挙げて考えてみよう。
# let g x y = x * x + y * y - 4 ;;
で関数 g を定義すると、関数 g の型は int -> int -> int となる。

「関数 g が返す結果の型が int -> int 型の関数」ということの意味を考えるために、
x を適当な値で固定してみよう。
例えば x = 3 とすると、関数 g の定義式である右辺は
3 * 3 + y * y - 4 = y * y + 5
となり、y についての int -> int 型の関数となっていることがわかる。

つまり、関数 g に対して x の具体的な値を与えると、
返り値として int -> int 型の関数があらわれてくるのだ。
これが「関数 g が返す結果の型が int -> int 型の関数である」ということの意味であり、
同時に「関数 g の型が int -> int -> int である」ということの意味だと思われる。
